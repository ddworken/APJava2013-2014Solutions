/*
 * File: HangmanCanvas.java
 * ------------------------
 * This file keeps track of the Hangman display.
 */

import acm.graphics.*;

public class HangmanCanvas extends GCanvas {

/** Resets the display so that only the scaffold appears */
	public void reset() {
		removeAll();
		scaffold();
	}

/**
 * Updates the word on the screen to correspond to the current
 * state of the game.  The argument string shows what letters have
 * been guessed so far; unguessed letters are indicated by hyphens.
 */
	public void displayWord(String word) {
		wordLabel.setLabel(word);
		wordLabel.setLocation((getWidth() - incorrectLabel.getWidth()) / 2, centerY * 1.75);
		add(wordLabel);
	}

/**
 * Updates the display to correspond to an incorrect guess by the
 * user.  Calling this method causes the next body part to appear
 * on the scaffold and adds the letter to the list of incorrect
 * guesses that appears at the bottom of the window.
 */
	public void noteIncorrectGuess(char letter, int guessesLeft) {
		updateWrongGuesses(letter);
		int incorrectGuesses = 10 - guessesLeft;
		addBodyPart(incorrectGuesses);
	}

	private void addBodyPart(int number){
		if(number ==1){
			head();
			//System.out.println("head");
		}else{
			if(number == 2){
				body();
				//System.out.println("body");
			}
			else{
				if(number == 3){
					rightArm();
					//System.out.println("rightArm");
				}
				else{
					if(number == 4){
						leftArm();
						//System.out.println("leftArm");
					}
					else{
						if(number == 5){
							rightHand();
							//System.out.println("rightHand");
						}
						else{
							if(number == 6){
								leftHand();
								//System.out.println("leftHand");
							}
							else{
								if(number ==7){
									leftLeg();
									//System.out.println("leftLeg");
								}
								else{
									if(number == 8){
										rightLeg();
										//System.out.println("rightLeg");
									}
									else{
										if(number == 9){
											rightFoot();
											//System.out.println("rightFoot");
										}
										else{
											if(number == 10){
												leftFoot();
												//System.out.println("leftFoot");
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	private void updateWrongGuesses (char letter){
		String badGuesses = incorrectLabel.getLabel();
		badGuesses = badGuesses + letter;
		incorrectLabel.setLocation((getWidth() - incorrectLabel.getWidth()) / 2, centerY * 1.85);
		incorrectLabel.setLabel(badGuesses);
		add(incorrectLabel);
	}
	
	private void scaffold(){
		centerMath();
		GLine rope = new GLine( centerX, 25, centerX, 25+ROPE_LENGTH);
		add(rope);
		GLine beam = new GLine(centerX, 25, centerX - BEAM_LENGTH, 25);
		add(beam);
		GLine upBeam = new GLine(centerX-BEAM_LENGTH, 25, centerX-BEAM_LENGTH, 25+SCAFFOLD_HEIGHT);
		add(upBeam);
	}
	
	private void centerMath(){
		centerX = getWidth() / 2;
		centerY = getHeight() /2;
	}
	
	private void head(){
		GOval head = new GOval(centerX - HEAD_RADIUS, 25 + ROPE_LENGTH, HEAD_RADIUS * 2, HEAD_RADIUS * 2);
		add(head);
	}
	
	private void body(){
		GLine body = new GLine(centerX, 27 + ROPE_LENGTH + HEAD_RADIUS *2, centerX, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2);
		add(body);
	}
	
	private void rightArm(){
		GLine rightArm = new GLine(centerX, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, centerX - UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD);
		add(rightArm);
	}
	
	private void leftArm(){
		GLine leftArm = new GLine(centerX, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, centerX + UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD);
		add(leftArm);
	}
	
	private void leftHand(){
		GLine leftHand = new GLine(centerX + UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, centerX + UPPER_ARM_LENGTH,25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH);
		add(leftHand);
	}
	
	private void rightHand(){
		GLine rightHand = new GLine(centerX - UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, centerX - UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH);
		add(rightHand);
	}
	
	private void leftLeg(){
		GLine leftHip = new GLine (centerX, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2);
		add(leftHip);
		GLine leftLeg = new GLine(centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
		add(leftLeg);
	}
	
	private void rightLeg(){
		GLine rightHip = new GLine(centerX, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX - HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2);
		add(rightHip);
		GLine rightLeg = new GLine(centerX - HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX - HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
		add(rightLeg);
	}
	
	private void leftFoot(){
		GLine leftFoot = new GLine(centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH, centerX + HIP_WIDTH + FOOT_LENGTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
		add(leftFoot);
	}
	
	private void rightFoot(){
		GLine rightFoot = new GLine(centerX - HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH, centerX - HIP_WIDTH - FOOT_LENGTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
		add(rightFoot);
	}
	
/* Constants for the simple version of the picture (in pixels) */
	private static final int SCAFFOLD_HEIGHT = 360;
	private static final int BEAM_LENGTH = 144;//
	private static final int ROPE_LENGTH = 18;//
	private static final int HEAD_RADIUS = 36;
	private static final int BODY_LENGTH = 144;
	private static final int ARM_OFFSET_FROM_HEAD = 28;
	private static final int UPPER_ARM_LENGTH = 72;
	private static final int LOWER_ARM_LENGTH = 44;
	private static final int HIP_WIDTH = 36;
	private static final int LEG_LENGTH = 108;
	private static final int FOOT_LENGTH = ARM_OFFSET_FROM_HEAD;
	int centerX;
	int centerY;
	GLine rope = new GLine(centerX, 50, centerX, 50+ROPE_LENGTH);
	GLine beam = new GLine(centerX, 50, centerX - BEAM_LENGTH, 50);
	GLine upBeam = new GLine(centerX-BEAM_LENGTH, 50, centerX-BEAM_LENGTH, 50+360);
	GLabel wordLabel = new GLabel("no", centerX, 200);
	GLabel incorrectLabel = new GLabel("Incorrect Guesses: ", centerX, 250);
	GOval head = new GOval(centerX - HEAD_RADIUS,  25 + ROPE_LENGTH, HEAD_RADIUS * 2, HEAD_RADIUS * 2);
	GLine body = new GLine(centerX, 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2);
	GLine rightArm = new GLine(centerX, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, 50, 50);
	GLine leftArm = new GLine(centerX, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, 50, 50);
	GLine rightHand = new GLine(centerX - UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, centerX - UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH);
	GLine leftHand = new GLine(centerX + UPPER_ARM_LENGTH, 25 + ROPE_LENGTH + HEAD_RADIUS *2 + ARM_OFFSET_FROM_HEAD, 50,50);
	GLine rightHip = new GLine(centerX, 25 + ROPE_LENGTH + HEAD_RADIUS *2, 50, 50);
	GLine rightLeg = new GLine(centerX - HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX - HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
	GLine rightFoot = new GLine(centerX - HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH, centerX - HIP_WIDTH - FOOT_LENGTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
	GLine leftHip = new GLine (centerX, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2);
	GLine leftLeg = new GLine(centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2, centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
	GLine leftFoot = new GLine(centerX + HIP_WIDTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH, centerX + HIP_WIDTH + FOOT_LENGTH, BODY_LENGTH + 25 + ROPE_LENGTH + HEAD_RADIUS *2 + LEG_LENGTH);
}
